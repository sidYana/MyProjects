package com.game.flappyBird;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import com.AI.GeneticAlgorithm.GeneticAlgorithm;

import processing.core.PApplet;
import processing.core.PVector;

import g4p_controls.*;

public class FlappyBird extends PApplet {

	private List<Pipe> pipes;
	private List<PlayerCreature> players;
	private GeneticAlgorithm ga;

	private PVector simArea = new PVector(700, 500);
	private PVector controlArea = new PVector(400, simArea.y);
	private int sliderPos;
	private long counter = 0;
	private int counterDiv = 125;

	private boolean forceRepool = false;
	private boolean reset_sim = false;
	private boolean user_ctrl = false;

	private PlayerCreature user_player;

	public static void main(String[] args) {
		PApplet.main(FlappyBird.class);
	}

	public void settings() {
		size((int) (simArea.x + controlArea.x), (int) (simArea.y));
	}

	public void setup() {
		createGUI();
		pipes = new ArrayList<Pipe>();
		ga = new GeneticAlgorithm(200, 10, 0.6, 0.025, simArea.x, height);
		players = ga.getPool();
	}

	private void drawPipes() {

		if (counter % counterDiv == 0 || pipes.isEmpty()) {
			pipes.add(new Pipe(this, simArea.x, height));
			counter = 0;
		}
		counter++;
		Iterator<Pipe> itr = pipes.iterator();
		while (itr.hasNext()) {
			Pipe pipe = itr.next();
			pipe.update();
			pipe.show(this);
			if (pipe.isOffScreen) {
				itr.remove();
			}
		}

	}

	private void drawNNPlayers() {
		int playerCounter = 0;
		for (PlayerCreature robot : players) {
			if (robot.isPlayerAlive()) {
				playerCounter++;
				Pipe closestPipe = robot.findClosestPipe(pipes, this);
				robot.update(closestPipe);
				robot.draw(this);
				if (closestPipe.hits(robot) || robot.posY >= height || robot.posY <= 0) {
					robot.playerDied();
				}
			}
		}
		if (playerCounter == 0) {
			repool();
		}
	}

	private void repool() {
		pipes = new ArrayList<Pipe>();
		ga.recreatePool(players);
		players = ga.getPool();
	}

	private void resetGame() {
		pipes = new ArrayList<Pipe>();
		ga = new GeneticAlgorithm(200, 10, 0.6, 0.025, simArea.x, height);
		players = ga.getPool();
		user_player = new PlayerCreature(simArea.x, height);
	}

	private void drawRealPlayer() {

		if (user_player == null || !user_player.isPlayerAlive()) {
			pipes = new ArrayList<Pipe>();
			user_player = new PlayerCreature(simArea.x, height);
		}

		Pipe closestPipe = user_player.findClosestPipe(pipes, this);
		user_player.userControl(this);
		user_player.draw(this);
		if (closestPipe.hits(user_player) || user_player.posY >= height || user_player.posY <= 0) {
			resetGame();
		}

	}

	public void draw() {
				
		for (int i = 0; i <= sliderPos; i++) {
			background(0);
			drawPipes();
			if (user_ctrl) {
				drawRealPlayer();
			} else {
				drawNNPlayers();
			}
		}
		drawControlScreen();

	}

	private void drawControlScreen() {
		stroke(255);
		line(simArea.x + 10, 0, simArea.x + 10, simArea.y);
		noStroke();
		textMode(CENTER);
		fill(255);
		text("GENERATION:" + ga.getGenerationCount(), simArea.x + 50, 50);
	}

	public void force_repool_event(GButton source, GEvent event) { // _CODE_:force_repool:249814:
		repool();
	} // _CODE_:force_repool:249814:

	public void reset_sim_event(GButton source, GEvent event) { // _CODE_:force_repool:249814:
		resetGame();
	} // _CODE_:force_repool:249814:

	public void nn_control_event(GButton source, GEvent event) { // _CODE_:force_repool:249814:
		resetGame();
		user_ctrl = false;
	} // _CODE_:force_repool:249814:

	public void user_control_event(GButton source, GEvent event) { // _CODE_:force_repool:249814:
		resetGame();
		user_ctrl = true;
	} // _CODE_:force_repool:249814:
	
	public void sim_speed_slider_event(GCustomSlider source, GEvent event) { // _CODE_:sim_speed_slider:456319:
		sliderPos = source.getValueI();
	} // _CODE_:sim_speed_slider:456319:

	public void pipe_spacing_slider_event(GCustomSlider source, GEvent event) { // _CODE_:sim_speed_slider:456319:
		counterDiv = source.getValueI();
	} // _CODE_:sim_speed_slider:456319:

	// Create all the GUI controls.
	// autogenerated do not edit
	public void createGUI() {
		G4P.messagesEnabled(false);
		G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
		G4P.setCursor(ARROW);
		surface.setTitle("Sketch Window");
		sim_speed_slider = new GCustomSlider(this, simArea.x + 50, 127, 198, 49, "grey_blue");
		sim_speed_slider.setShowValue(true);
		sim_speed_slider.setShowLimits(true);
		sim_speed_slider.setLimits(1, 1, 50);
		sim_speed_slider.setShowTicks(true);
		sim_speed_slider.setNumberFormat(G4P.INTEGER, 0);
		sim_speed_slider.setLocalColorScheme(GCScheme.CYAN_SCHEME);
		sim_speed_slider.setOpaque(true);
		sim_speed_slider.addEventHandler(this, "sim_speed_slider_event");

		pipe_spacing_slider = new GCustomSlider(this, simArea.x + 50, 227, 198, 49, "grey_blue");
		pipe_spacing_slider.setShowValue(true);
		pipe_spacing_slider.setShowLimits(true);
		pipe_spacing_slider.setLimits(counterDiv, 100, 125);
		pipe_spacing_slider.setShowTicks(true);
		pipe_spacing_slider.setNumberFormat(G4P.INTEGER, 0);
		pipe_spacing_slider.setLocalColorScheme(GCScheme.CYAN_SCHEME);
		pipe_spacing_slider.setOpaque(true);
		pipe_spacing_slider.addEventHandler(this, "pipe_spacing_slider_event");

		force_repool = new GButton(this, simArea.x + 50, 300, 150, 30);
		force_repool.setText("Force Re-Pool");
		force_repool.setTextBold();
		force_repool.addEventHandler(this, "force_repool_event");

		reset_simulation = new GButton(this, simArea.x + 50, 350, 150, 30);
		reset_simulation.setText("Reset Simulation");
		reset_simulation.setTextBold();
		reset_simulation.addEventHandler(this, "reset_sim_event");

		user_control = new GButton(this, simArea.x + 50, 400, 150, 30);
		user_control.setText("User Control");
		user_control.setTextBold();
		user_control.addEventHandler(this, "user_control_event");

		nn_control = new GButton(this, simArea.x + 50, 450, 150, 30);
		nn_control.setText("Neural Net Control");
		nn_control.setTextBold();
		nn_control.addEventHandler(this, "nn_control_event");
	}

	// Variable declarations
	// autogenerated do not edit
	GCustomSlider sim_speed_slider;
	GCustomSlider pipe_spacing_slider;
	GButton force_repool, reset_simulation, user_control, nn_control;
}
